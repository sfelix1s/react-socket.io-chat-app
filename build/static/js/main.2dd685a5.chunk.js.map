{"version":3,"sources":["Auth.js","components/chat.js","views/home.js","components/Public.js","Router.js","serviceWorker.js","index.js","App.js"],"names":["Auth","isAuthenticated","authenticate","this","signout","getAuth","socket","io","transports","state","name","JSON","parse","localStorage","getItem","messages","newMessage","difference","online_users","componentDidMount","on","message","_this","setState","prevState","concat","Object","toConsumableArray","interval","setInterval","updateTimePassAfterMessageHasSent","getOnlineUsers","componentWillUnmount","close","clearInterval","array_of_messages","forEach","chat_message","today","Date","endDate","startTime","days","parseInt","hours","Math","abs","minutes","getTime","seconds","timeDifference","push","handleSubmitName","logout","props","history","login_users","console","log","handleSubmitMasseges","e","preventDefault","emit","timestamp","toISOString","_this2","_this$state","ROOT_CSS","css","height","react_default","a","createElement","Paper","style","margin","background","Grid","container","spacing","item","xs","Typography","variant","gutterBottom","textAlign","color","direction","justify","alignItems","Button","size","onClick","top","marginTop","backgroundImage","react_scroll_to_bottom_lib_default","className","List","map","i","ListItem","key","ListItemAvatar","Avatar","alt","src","ListItemText","primary","secondary","Fragment","component","Divider","display","flexbox","bottom","TextField","position","id","label","left","right","width","placeholder","fullWidth","value","onChange","target","InputLabelProps","shrink","Icon","Component","handleSubmit","removeItem","setItem","stringify","login","Public","PrivateRoute","_ref","rest","objectWithoutProperties","react_router","assign","render","to","pathname","Router","react_router_dom","exact","path","Index","Router_PrivateRoute","Chat","Boolean","window","location","hostname","match","ReactDOM","src_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2dd685a5.chunk.js","sourcesContent":["const Auth = {\n  isAuthenticated: false,\n  authenticate() {\n    this.isAuthenticated = true;\n  },\n  signout() {\n    this.isAuthenticated = false;\n  },\n  getAuth() {\n      return this.isAuthenticated;\n  }\n};\n\nexport default Auth;","import React, { Component } from 'react'\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button'\nimport io from 'socket.io-client';\nimport { flexbox } from '@material-ui/system';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography'\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid';\nimport Icon from '@material-ui/core/Icon';\nimport Auth from '../Auth';\nimport ScrollToBottom from 'react-scroll-to-bottom';\nimport { css, right } from 'glamor';\nimport { grey } from '@material-ui/core/colors';\n\nconst socket = io('https://express-socket-io-server.herokuapp.com',{ transports: ['websocket'] });\n\nexport default class extends Component {\n    state = {\n        name : JSON.parse(localStorage.getItem('name')),\n        messages: [],\n        newMessage: '',\n        difference: '0 seconds ago',\n        online_users: []\n    }\n    componentDidMount = () =>  {\n        socket.on('chat', message => {\n            this.setState(prevState => ({\n                messages: [...prevState.messages, message]\n              }));\n        })\n        this.interval = setInterval(() => this.updateTimePassAfterMessageHasSent(), 2000);\n        this.getOnlineUsers()\n        \n    }\n    componentWillUnmount = ()  => {\n        socket.close()\n        clearInterval(this.interval)\n    }\n    updateTimePassAfterMessageHasSent =  () => {\n        var array_of_messages = []\n        this.state.messages.forEach((chat_message)=> {\n            const today = new Date();\n            const endDate = new Date(chat_message.startTime);\n            const days = parseInt((endDate - today) / (1000 * 60 * 60 * 24));\n            const hours = parseInt(Math.abs(endDate - today) / (1000 * 60 * 60) % 24);\n            const minutes = parseInt(Math.abs(endDate.getTime() - today.getTime()) / (1000 * 60) % 60);\n            const seconds = parseInt(Math.abs(endDate.getTime() - today.getTime()) / (1000) % 60);\n            \n            if(minutes > 60){\n                chat_message.timeDifference = hours + ' ' + 'hour/s ago'\n                array_of_messages.push(chat_message)\n            }else if(hours > 24){\n                chat_message.timeDifference = days + ' ' + 'day/s ago'\n                array_of_messages.push(chat_message)\n            }else if(minutes <= 0 ){\n                chat_message.timeDifference = seconds + ' ' + 'second/s ago'\n                array_of_messages.push(chat_message)\n            }else{\n                chat_message.timeDifference = minutes + ' ' + 'minute/s ago'\n                array_of_messages.push(chat_message)\n            }\n        })\n       this.setState({message:array_of_messages})\n    }\n    handleSubmitName = (name) => {\n        this.setState({name:name})\n    }\n    logout = () => {\n        Auth.signout();\n        this.props.history.push('/')\n    }\n    getOnlineUsers = () => {\n        var login_users = [];\n        var online_users = login_users.push(this.state.name)\n        this.setState({online_users: online_users})\n        console.log('this.state.online_users', login_users)\n    }\n    handleSubmitMasseges = (e) => {\n        e.preventDefault()\n        socket.emit('chat', {\n            name:this.state.name,\n            message: this.state.newMessage,\n            timestamp: new Date().toISOString(),\n            startTime: new Date()\n        })\n        this.setState({\n            newMessage:''\n        })\n    }\n\n    render() {\n        const { name, messages, newMessage} = this.state;\n        const ROOT_CSS = css({\n             height: 500\n        });\n    \n        return (\n            <Paper style={{ margin:'50px', background:'#fafafa'}}> \n                <Grid container spacing={3}>\n                    <Grid item xs={3}>\n                        <Paper\n                            style={{ height:'500px', background:'#fafafa'}}\n                            >\n                            <Typography \n                                variant=\"h5\" \n                                gutterBottom\n                                style={{ textAlign:'center'}}\n                            >\n                            Chat App\n                            </Typography>\n                            <hr style={{ color:'grey'}}/>\n                       \n                            <Grid\n                                container\n                                direction=\"row\"\n                                justify=\"center\"\n                                alignItems=\"center\"\n                                > \n                                <Button \n                                    style={{ textAlign:'center'}}\n                                    size=\"small\"\n                                    variant=\"contained\"\n                                    onClick={this.logout}\n                                    >\n                                    logout\n                                </Button>\n                            </Grid>\n                            <Typography\n                                style={{ textAlign:'center', top:20, marginTop:'20px'}}\n                            >\n                            Channels\n                            </Typography>\n                        </Paper>\n                    </Grid>\n                <Grid item xs={9}>\n                    <Paper  \n                        style={{ height:'500px', background:'#e8f5e9', backgroundImage: `url(${\"http://i.imgur.com/TnNwdvV.png\"})`}}>\n                        <ScrollToBottom className={ ROOT_CSS }>\n                 \n                            <List> \n                            {\n                            messages.map((message,i) => [\n                                <ListItem \n                                    alignItems=\"flex-start\" \n                                    key={i}\n                                    >\n                                    <ListItemAvatar>\n                                        <Avatar alt=\"Remy Sharp\" src=\"https://img.icons8.com/bubbles/2x/user.png\" />\n                                    </ListItemAvatar>\n                                    <ListItemText\n                                        primary={message.name}\n                                        secondary={\n                                        <React.Fragment>\n                                            <Typography\n                                                component=\"span\"\n                                                variant=\"body2\"\n                                                color=\"textPrimary\"\n                                                >\n                                            {message.message}\n                                            </Typography>\n                                            {'  '}{message.timeDifference}\n                                        </React.Fragment>\n                                        }\n                                    />\n                                </ListItem>,\n                            <Divider \n                                variant=\"inset\" \n                                component=\"li\"\n                                color=\"#212121\"\n                                key={message.timestamp} />\n                            ])}\n                            </List>\n                        </ScrollToBottom>\n                    </Paper>\n                </Grid>\n       \n             </Grid>\n                 <div style={{display:flexbox,bottom:0}}>\n                    <TextField\n                        position=\"fixed\"\n                        id=\"outlined-full-width\"\n                        label=\"Chat\"\n                        style={{ top: 10, left:2, right:2, width:'87%',bottom:0}}\n                        placeholder=\"Type a message\"\n                        fullWidth\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        value={newMessage}\n                        onChange={(e)=>{\n                            this.setState({newMessage:e.target.value})\n                        }}\n                        InputLabelProps={{\n                        shrink: true,\n                        }}\n                    >\n                    </TextField>\n              \n                    <Button \n                        position=\"fixed\"\n                        style={{width:'12%', height:'56px',top:26, left:4, bottom:0}}\n                        size=\"large\"\n                        variant=\"outlined\"\n                        onClick={this.handleSubmitMasseges}\n                    >   \n                       <Icon>send</Icon>\n                        \n                    </Button>\n               </div>\n            </Paper>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper'\nimport Grid from '@material-ui/core/Grid';\nimport Auth from '../Auth';\nimport { flexbox } from '@material-ui/system';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\n\nexport default class extends Component {\n    state = {\n        name: ''\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault()\n        localStorage.removeItem('name');\n        localStorage.setItem('name', JSON.stringify(this.state.name))\n        if(this.state.name){\n          this.login()\n          this.props.history.push('/chat')\n        }else{\n            this.props.history.push('/')\n        }\n    }\n    login = ()=>{\n        Auth.authenticate();\n        console.log(Auth.getAuth())\n    }\n\n    logout  = () => {\n        Auth.signout();\n    }\n    render() {\n        return (\n            <div>\n                <Grid item xs={12}>\n                    <Paper style={{textAlign: 'center', height:'640px', background:'#efebe9'}}>\n              \n                    <TextField\n                        style={{left:50}}\n                        id=\"outlined-name\"\n                        label=\"Login\"\n                        placeholder=\"Enter your name\"\n                        value={this.state.name}\n                        onChange={(e)=>{\n                            this.setState({name:e.target.value})\n                        }}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                    >\n                 \n                    </TextField>\n                    <Button \n                        style={{top:17, left:52, height:'56px'}}\n                        size=\"large\"\n                        variant=\"outlined\"\n                        onClick={this.handleSubmit}\n                    >\n                        submit\n                    </Button>\n                </Paper>\n            </Grid>\n        </div>\n        )\n    }\n}\n","import React from 'react';\n\nconst Public =() => {\n    return <h1> This is a Public route</h1>\n}\n\nexport default Public;","import React, {Component} from 'react';\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport App from './App';\nimport Chat from './components/chat'\nimport Index from './views/home'\nimport Public from './components/Public';\nimport Auth from './Auth';\n\nconst Router = (props) => (\n  <BrowserRouter>\n    <Switch>\n      <Route exact path='/public' component={Public}/>\n      <Route exact path='/' component={Index}/>\n      <PrivateRoute path=\"/chat\" component={Chat} />\n    </Switch>\n  </BrowserRouter>\n  \n)\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      Auth.getAuth() ? (\n        <Component {...props} />\n      ) : (\n        <Redirect\n          to={{\n            pathname: \"/\"\n          }}\n        />\n      )\n    }\n  />\n);\n\n\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport Router from './Router';\n\nexport default () => (\n\n      <div>\n            <Router/>\n      </div>\n   \n)\n\n"],"sourceRoot":""}